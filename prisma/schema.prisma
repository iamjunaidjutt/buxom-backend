// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  first_name     String?
  last_name      String?
  phone          String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  role           Role            @default(USER)
  Order          Order[]
  Review         Review[]
  UserPreference UserPreference?
}

model UserPreference {
  id         String   @id @default(uuid())
  month      String
  day        Int
  newsLetter Boolean
  smsUpdates Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

enum Role {
  ADMIN
  USER
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  imageURL    String?
  products    Product[]
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String?
  price        Float
  stock        Int
  tags         Json
  imageURLs    Json
  badges       Json
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  shades       Shade[]
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  orders       Order[]
  OrderProduct OrderProduct[]
  Review       Review[]
}

model Shade {
  id          String   @id @default(uuid())
  name        String
  description String?
  code        String
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

model Order {
  id           String         @id @default(uuid())
  total        Float
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  products     Product[]
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  OrderProduct OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}
